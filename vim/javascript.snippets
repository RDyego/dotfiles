snippet im "Import statement"
import { $1 } from '${0:module}';
endsnippet

snippet imas "Import * as statement"
import * as $1 from '${0:module}';
endsnippet

snippet re "Require statement"
require('${0:module}');
endsnippet

snippet us "'use strict'; statement"
'use strict';
endsnippet

snippet var "Variable statement"
var ${0:variableName} = ${1:value};
endsnippet

snippet let "Let variable statement"
let ${0:variableName} = ${1:value};
endsnippet

snippet const "Constant statement"
const ${0:constantName} = ${1:value};
endsnippet

snippet fn "Function statement"
function ${1:name}(${2:param}) {
	$0
}
endsnippet

snippet cls "Class statement"
class ${1:ClassName} {
	$0
}
endsnippet

snippet clsx "Class that extends another class"
class ${1:ClassName} extends ${2:AnotherClass} {
	$0
}
endsnippet

snippet ct "Class constructor"
constructor(${1:...args}) {
	$0
}
endsnippet

snippet cts "Class constructor with super() call"
constructor(${1:...args}) {
	super(${1:...args});

	$0
}
endsnippet

snippet mt "Class method"
${1:methodName}(${2:param}) {
	$0
}
endsnippet

snippet sw "Switch statement"
switch (${1:variable}) {
	case ${2:value}:
	    $0
	break;
	default:
	return $3;
}
endsnippet

snippet de "debugger; statement"
debugger;
endsnippet

snippet cl "console.log() statement"
console.log(${1:value});
endsnippet

snippet ci "console.info() statement"
console.info(${1:value});
endsnippet

snippet cw "console.warn() statement"
console.warn(${1:value});
endsnippet

snippet ce "console.error() statement"
console.error(${1:value});
endsnippet
